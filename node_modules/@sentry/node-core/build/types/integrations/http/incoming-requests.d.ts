/// <reference types="node" />
/// <reference types="node" />
import type { Scope } from '@sentry/core';
import type EventEmitter from 'events';
import type { IncomingMessage, Server } from 'http';
/**
 * Instrument a server to capture incoming requests.
 *
 */
export declare function instrumentServer(server: Server, { ignoreIncomingRequestBody, maxIncomingRequestBodySize, trackIncomingRequestsAsSessions, sessionFlushingDelayMS, }: {
    ignoreIncomingRequestBody?: (url: string, request: IncomingMessage) => boolean;
    maxIncomingRequestBodySize?: 'small' | 'medium' | 'always' | 'none';
    trackIncomingRequestsAsSessions?: boolean;
    sessionFlushingDelayMS: number;
}): void;
/**
 * Starts a session and tracks it in the context of a given isolation scope.
 * When the passed response is finished, the session is put into a task and is
 * aggregated with other sessions that may happen in a certain time window
 * (sessionFlushingDelayMs).
 *
 * The sessions are always aggregated by the client that is on the current scope
 * at the time of ending the response (if there is one).
 */
export declare function recordRequestSession({ requestIsolationScope, response, sessionFlushingDelayMS, }: {
    requestIsolationScope: Scope;
    response: EventEmitter;
    sessionFlushingDelayMS?: number;
}): void;
//# sourceMappingURL=incoming-requests.d.ts.map